function zsh_add_file() {
    [ -f "$ZDOTDIR/$1" ] && source "$ZDOTDIR/$1"
}

function zsh_add_plugin() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then
        # For plugins
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh" || \
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.zsh"
    else
        git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
    fi
}

function dropLine() {
    file=${1}
    pattern=${2}
    lineNumber=$(grep -n -m 1 "$pattern" ${file} | cut -d : -f 1)
    if [[ ! -z "$lineNumber" ]]; then
        sed -i "${lineNumber}d" ${file}
    fi
}

function fds() {
  preview="git diff $@ --color=always {1} | delta "
  git diff $@ --name-only | fzf --header "Changed files" --preview $preview | pbcopy
}

function gb() {
  git branch --sort=-committerdate | fzf --header "Checkout Recent Branch" --preview "git diff --color=always {1} | delta" --pointer="îœ¥" | xargs git checkout
}

# Create a new directory and enter it
function mkd() {
   mkdir -p "$@" && cd "$@"
}


function weather() {
   city="$1"

   if [ -z "$city" ]; then
      city="berlin"
   fi

   eval "curl http://wttr.in/${city}"
}


#  Commit everything
function gc() {
  commitMessage="$1"

  if [ "$commitMessage" = "" ]; then
     commitMessage="wip"
  fi

  git add .
  eval "git commit -a -m '${commitMessage}'"
}

function toggle_layout() {
  CURRENT_LAYOUT=$(yabai -m query --spaces --space | jq '.type')
  if [ $CURRENT_LAYOUT = '"stack"' ]; then
    yabai -m space --layout bsp
  else
    yabai -m space --layout stack
  fi
}

function rwm(){
  killall AeroSpace && open -a AeroSpace
}

function ns(){
  fileName="$HOME/Dropbox/arch_linux/org/$(date +'%d_%m_%Y_%A').org"
  nvim $fileName
}


function ms(){
  yabai -m window --toggle float --grid 4:4:1:1:2:2
  yabai -m window --toggle sticky
  yabai -m window --toggle topmost
  ns
}


# t - smart tmux session manager
#
# - If you are outside a tmux session, it will try to attach to a session named
#   after the current directory. If no such session exists, it will create it.
# - If you are inside a tmux session, it will switch to a session named after
#   the current directory. If no such session exists, it will be created and
#   then switched to.
#
# Session names are derived from the current directory's basename, with spaces,
# dots, and hyphens replaced by underscores.
function t(){
  # Use current directory name for session name, replacing spaces, dots, and hyphens
  local SESSION_NAME
  SESSION_NAME=$(basename "$PWD" | tr ' .-' '_')

  # Check if we are inside a tmux session
  if [ -n "$TMUX" ]; then
    # We are in tmux.
    # Check if the session exists. The `2>/dev/null` suppresses the error message
    # if the session does not exist.
    if ! tmux has-session -t="$SESSION_NAME" 2>/dev/null; then
      # Session does not exist, so create it detached.
      # It will inherit the current path.
      tmux new-session -d -s "$SESSION_NAME"
    fi
    # Session now exists, attach to it.
    # `attach-session` is used because it will switch the client if run from within tmux,
    # which is more robust than `switch-client` and avoids "no current client" errors.
    tmux attach-session -t "$SESSION_NAME"
  else
    # We are not in tmux.
    # `attach-session` will fail if the session does not exist.
    # In that case, the `||` will execute `new-session`.
    tmux attach-session -t "$SESSION_NAME" 2>/dev/null || tmux new-session -s "$SESSION_NAME"
  fi
}
